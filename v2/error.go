package v2

import (
	"encoding/json"
	"net/http"
	"os"
)

const (
	internalErrorTitle       = "Internal Server Error"
	internalErrorDescription = "An unexpected error occurred during the request and the service is unable to continue with your request. Please try again"
	internalErrorStatus      = 500
	internalErrorUri         = "https://www.rfc-editor.org/rfc/rfc9110#section-15.6.1"
)

const contentType = "application/problem+json; charset=utf-8"

// WISdoMError is the standard error layout returned by the microservices in
// case something goes wrong with the handling of a request.
//
// It implements [RFC 9457] to use a predefined standard for error handling
// and extends it by the following fields
//
// error: This field contains the output generated by calling Error() on the
// object implementing the [error interface] when generating an error from it
//
// [RFC 9457]: https://datatracker.ietf.org/doc/html/rfc9457
// [error interface]: https://pkg.go.dev/builtin#error
type WISdoMError struct {
	// Type contains a URI reference that identifies the problem type. This
	// identifier should be used as primary identifier.
	//
	// see more: https://datatracker.ietf.org/doc/html/rfc9457#section-3.1.1
	Type string `json:"type"`

	// Status contains the HTTP Status Code as defined in [RFC 9110]
	//
	// [RFC 9110]: https://www.rfc-editor.org/rfc/rfc9110#section-15
	Status int `json:"status"`

	// Title contains a short, human-readable summary of the problem (e.g.
	// Missing Authorization Information)
	Title string `json:"title"`

	// Detail contains a human-readable description of the problem type while
	// focusing on problem correction instead of debugging
	Detail string `json:"detail"`

	// Instance contains a (possibly dereferenceable) URI which identifies the
	// specific occurrence of the error
	Instance string `json:"instance"`

	// Error contains the output generated by calling [error.Error()] on an
	// error object and is used when wrapping errors into a WISdoMError.
	// This is an extension member as defined in [RFC 9457] and will be omitted
	// if it is not set
	//
	// [RFC 9457]: https://datatracker.ietf.org/doc/html/rfc9457#section-3.2
	// [error.Error()]: https://pkg.go.dev/builtin#error
	Error string `json:"error,omitempty"`
}

// setInstance sets the instance ID of the WISdoMError structure to the hostname
// retrieved from the operating system. It uses the os.Hostname function to
// obtain the hostname and assigns it to the Instance field of the WISdoMError
// object. If there is an error retrieving the hostname, it will be returned.
// Example usage:
//
//	err := &WISdoMError{}
//	err.setInstance()
//	fmt.Println(err.Instance)
//
// This function needs to be called before sending or writing the error to any
// type of output to allow an identification of the instance responsible for
// the error
func (e *WISdoMError) setInstance() (err error) {
	hostname, err := os.Hostname()
	e.Instance = hostname
	return err
}

// WrapNativeError wraps a native error with the WISdoMError structure.
// It retrieves the instance ID (the hostname reported by the kernel) using
// the getInstance method. If there is
func (e *WISdoMError) WrapNativeError(err error) {
	*e = WISdoMError{
		Type:   internalErrorUri,
		Status: internalErrorStatus,
		Title:  internalErrorTitle,
		Detail: internalErrorDescription,
		Error:  err.Error(),
	}
}

// Send writes the WISdoMError instance as JSON to the http.ResponseWriter.
// It sets the correct content type header, specified as
// "application/problem+json; charset=utf-8".
// It returns an error if there is any issue encoding or writing the JSON.
func (e *WISdoMError) Send(w http.ResponseWriter) error {
	// set the instance id before sending the error back to the users
	err := e.setInstance()
	if err != nil {
		return err
	}
	// set the correct content type
	w.Header().Set("Content-Type", contentType)
	// send the http codes specified in the error
	w.WriteHeader(e.Status)
	// now return the json generated of the error instance
	return json.NewEncoder(w).Encode(e)
}
